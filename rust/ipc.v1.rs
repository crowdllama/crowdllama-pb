// @generated
// This file is @generated by prost-build.
/// Error represents an error response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    /// The error code
    #[prost(enumeration="ErrorCode", tag="1")]
    pub code: i32,
    /// Human-readable error message
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
    /// Additional error details
    #[prost(string, tag="3")]
    pub details: ::prost::alloc::string::String,
    /// Additional metadata
    #[prost(map="string, string", tag="4")]
    pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// StatusResponse represents a status response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusResponse {
    /// The status of the operation
    #[prost(enumeration="Status", tag="1")]
    pub status: i32,
    /// Status message
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
    /// When the status was generated
    #[prost(message, optional, tag="3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Error details if status is ERROR
    #[prost(message, optional, tag="4")]
    pub error: ::core::option::Option<Error>,
    /// Additional metadata
    #[prost(map="string, string", tag="5")]
    pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// HealthCheckRequest represents a health check request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckRequest {
    /// Service name to check
    #[prost(string, tag="1")]
    pub service: ::prost::alloc::string::String,
    /// Health check parameters
    #[prost(map="string, string", tag="2")]
    pub parameters: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// HealthCheckResponse represents a health check response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    /// Overall health status
    #[prost(enumeration="Status", tag="1")]
    pub status: i32,
    /// Service name
    #[prost(string, tag="2")]
    pub service: ::prost::alloc::string::String,
    /// When the check was performed
    #[prost(message, optional, tag="3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Health check details
    #[prost(map="string, string", tag="4")]
    pub details: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
    /// Error if health check failed
    #[prost(message, optional, tag="5")]
    pub error: ::core::option::Option<Error>,
}
/// PingRequest represents a ping request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingRequest {
    /// Optional ping message
    #[prost(string, tag="1")]
    pub message: ::prost::alloc::string::String,
    /// When the ping was sent
    #[prost(message, optional, tag="2")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
}
/// PingResponse represents a ping response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PingResponse {
    /// Pong message
    #[prost(string, tag="1")]
    pub message: ::prost::alloc::string::String,
    /// When the pong was sent
    #[prost(message, optional, tag="2")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Latency in milliseconds
    #[prost(int64, tag="3")]
    pub latency_ms: i64,
}
/// GetStatusRequest represents a request to get service status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStatusRequest {
    /// Service name to get status for
    #[prost(string, tag="1")]
    pub service: ::prost::alloc::string::String,
    /// Status check parameters
    #[prost(map="string, string", tag="2")]
    pub parameters: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// GetStatusResponse represents a response with service status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStatusResponse {
    /// The status of the service
    #[prost(enumeration="Status", tag="1")]
    pub status: i32,
    /// Status message
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
    /// When the status was generated
    #[prost(message, optional, tag="3")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Error details if status is ERROR
    #[prost(message, optional, tag="4")]
    pub error: ::core::option::Option<Error>,
    /// Additional metadata
    #[prost(map="string, string", tag="5")]
    pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// GenericMessage represents a generic message structure
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenericMessage {
    /// Unique message ID
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    /// Message type
    #[prost(string, tag="2")]
    pub r#type: ::prost::alloc::string::String,
    /// Message payload
    #[prost(bytes="vec", tag="3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// When the message was created
    #[prost(message, optional, tag="4")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Message headers
    #[prost(map="string, string", tag="5")]
    pub headers: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
/// Initialize represents an initialization message
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Initialize {
    /// The mode for initialization (CONSUMER or WORKER)
    #[prost(enumeration="Mode", tag="1")]
    pub mode: i32,
}
/// NetworkStatus represents the current network status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NetworkStatus {
    /// Current network state
    #[prost(enumeration="NetworkState", tag="1")]
    pub state: i32,
    /// Number of connected peers
    #[prost(int32, tag="2")]
    pub peer_count: i32,
}
/// Status represents the status of an operation
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Unspecified = 0,
    Success = 1,
    Error = 2,
    Pending = 3,
    Cancelled = 4,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Unspecified => "STATUS_UNSPECIFIED",
            Status::Success => "STATUS_SUCCESS",
            Status::Error => "STATUS_ERROR",
            Status::Pending => "STATUS_PENDING",
            Status::Cancelled => "STATUS_CANCELLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "STATUS_SUCCESS" => Some(Self::Success),
            "STATUS_ERROR" => Some(Self::Error),
            "STATUS_PENDING" => Some(Self::Pending),
            "STATUS_CANCELLED" => Some(Self::Cancelled),
            _ => None,
        }
    }
}
/// ErrorCode represents different types of errors
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorCode {
    Unspecified = 0,
    InvalidRequest = 1,
    InternalError = 2,
    Timeout = 3,
    NotFound = 4,
    PermissionDenied = 5,
    ResourceExhausted = 6,
    Unavailable = 7,
}
impl ErrorCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ErrorCode::Unspecified => "ERROR_CODE_UNSPECIFIED",
            ErrorCode::InvalidRequest => "ERROR_CODE_INVALID_REQUEST",
            ErrorCode::InternalError => "ERROR_CODE_INTERNAL_ERROR",
            ErrorCode::Timeout => "ERROR_CODE_TIMEOUT",
            ErrorCode::NotFound => "ERROR_CODE_NOT_FOUND",
            ErrorCode::PermissionDenied => "ERROR_CODE_PERMISSION_DENIED",
            ErrorCode::ResourceExhausted => "ERROR_CODE_RESOURCE_EXHAUSTED",
            ErrorCode::Unavailable => "ERROR_CODE_UNAVAILABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR_CODE_UNSPECIFIED" => Some(Self::Unspecified),
            "ERROR_CODE_INVALID_REQUEST" => Some(Self::InvalidRequest),
            "ERROR_CODE_INTERNAL_ERROR" => Some(Self::InternalError),
            "ERROR_CODE_TIMEOUT" => Some(Self::Timeout),
            "ERROR_CODE_NOT_FOUND" => Some(Self::NotFound),
            "ERROR_CODE_PERMISSION_DENIED" => Some(Self::PermissionDenied),
            "ERROR_CODE_RESOURCE_EXHAUSTED" => Some(Self::ResourceExhausted),
            "ERROR_CODE_UNAVAILABLE" => Some(Self::Unavailable),
            _ => None,
        }
    }
}
/// Mode represents the initialization mode for a process
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mode {
    Unspecified = 0,
    Consumer = 1,
    Worker = 2,
}
impl Mode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mode::Unspecified => "MODE_UNSPECIFIED",
            Mode::Consumer => "MODE_CONSUMER",
            Mode::Worker => "MODE_WORKER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MODE_UNSPECIFIED" => Some(Self::Unspecified),
            "MODE_CONSUMER" => Some(Self::Consumer),
            "MODE_WORKER" => Some(Self::Worker),
            _ => None,
        }
    }
}
/// NetworkState represents the state of network connectivity
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NetworkState {
    Unspecified = 0,
    Disconnected = 1,
    Connecting = 2,
    Connected = 3,
}
impl NetworkState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NetworkState::Unspecified => "NETWORK_STATE_UNSPECIFIED",
            NetworkState::Disconnected => "NETWORK_STATE_DISCONNECTED",
            NetworkState::Connecting => "NETWORK_STATE_CONNECTING",
            NetworkState::Connected => "NETWORK_STATE_CONNECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NETWORK_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "NETWORK_STATE_DISCONNECTED" => Some(Self::Disconnected),
            "NETWORK_STATE_CONNECTING" => Some(Self::Connecting),
            "NETWORK_STATE_CONNECTED" => Some(Self::Connected),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
